// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π
import "../scss/app.scss";

import * as htmlToImage from 'html-to-image';
import { saveAs } from 'file-saver';

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import "./modules/modal.module";
import "./modules/now.module";
import "./modules/wow.module";

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
import "./components/details";

const addCategoryBtn = document.getElementById("addCategoryBtn");
const addBankBtn = document.getElementById("addBankBtn");
const saveCategoryBtn = document.getElementById("saveCategory");
const saveBankBtn = document.getElementById("saveBank");
const modal = document.getElementById("modal");
const modalContent = modal.querySelector(".modal-content");

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
let state = {
  banks: JSON.parse(localStorage.getItem("banks")) || [],
  categories: JSON.parse(localStorage.getItem("categories")) || [],
  currentMonth: new Date().toLocaleString("ru-RU", {
    month: "long",
    year: "numeric",
  }),
  currentDate: new Date(),
};

class appState {
  constructor() {
    this.saveState();
  }

  saveState() {
    localStorage.setItem("banks", JSON.stringify(state.banks));
    localStorage.setItem("categories", JSON.stringify(state.categories));
  }
}

class Banks {
  constructor() {
    this.availableBanks = {
      –ê–ª—å—Ñ–∞: "alpha-bank.svg",
      –í–¢–ë: "vtb-bank.svg",
      –†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω: "raiffaizen-bank.svg",
      –°–±–µ—Ä: "sber-bank.svg",
      –¢–∏–Ω—å–∫–æ—Ñ—Ñ: "tinkoff-bank.svg",
      "–Ø–Ω–¥–µ–∫—Å –ë–∞–Ω–∫": "yandex-bank.svg",
    };
    this.renderBanks();
  }

  renderBanks() {
    const list = document.getElementById('banksList');

    list.innerHTML = state.banks.map(bank => `
      <div class="card card-bank" data-id="${bank.id}" ${bank.color ? `style="border-color: ${bank.color};"` : ""}>
        <div class="color" style="background: ${bank.color};"></div>
        <img src="/assets/banks/${bank.icon}" alt="${bank.name}" class="bank-icon" />
        ${bank.name}
        <details class="dropdown-menu">
          <summary class="btn dropdown-btn">
            <i class="fa-solid fa-ellipsis"></i>
          </summary>
          <div class="dropdown-content">
            <div class="card-bank--actions">
              <button class="edit-bank-btn" data-id="${bank.id}">
                <i class="fa-solid fa-pencil"></i>
              </button>
              <button class="delete-bank-btn" data-id="${bank.id}">
                <i class="fa-solid fa-trash-can"></i>
              </button>
            </div>
          </div>
        </details>
      </div>
    `).join('');

    // –í–µ—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    list.querySelectorAll('.delete-bank-btn').forEach(btn => {
      btn.addEventListener('click', (e) => {
        e.stopPropagation();
        this.deleteBank(parseInt(e.target.dataset.id));
      });
    });

    list.querySelectorAll('.edit-bank-btn').forEach(btn => {
      btn.addEventListener('click', (e) => {
        e.stopPropagation();
        this.editBank(parseInt(e.target.dataset.id));
      });
    });
  }

  editBank(id) {
    const bank = state.banks.find(b => b.id === id);

    modalContent.innerHTML = `
      <h2 class="text-center">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±–∞–Ω–∫</h2>
      <div class="form">
        <div class="form-creating--inputs">
          <div class="form-group">
            <label>–ù–∞–∑–≤–∞–Ω–∏–µ:</label>
            <input type="text" id="editBankName" value="${bank.name}" class="form-input" />
          </div>
          <div class="form-group">
            <label>–¶–≤–µ—Ç:</label>
            <div class="color-picker">
              <input type="color" id="editBankColor" value="${bank.color}" />
              <span class="color-preview" style="background: ${bank.color}"></span>
            </div>
          </div>
        </div>
        <div class="form-actions">
          <button id="saveBankChanges" class="btn-primary">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
          <button id="cancelBankEdit" class="btn-secondary">–û—Ç–º–µ–Ω–∞</button>
          <button id="deleteBankBtn" class="btn-danger">–£–¥–∞–ª–∏—Ç—å –±–∞–Ω–∫</button>
        </div>
      </div>
    `;

    modal.classList.add('show');

    // –†–µ–∞–ª–∏–∑—É–µ–º –ø—Ä–µ–≤—å—é —Ü–≤–µ—Ç–∞
    const colorInput = document.getElementById('editBankColor');
    const colorPreview = document.querySelector('.color-preview');

    colorInput.addEventListener('input', () => {
      colorPreview.style.background = colorInput.value;
    });

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    document.getElementById('saveBankChanges').addEventListener('click', () => {
      bank.name = document.getElementById('editBankName').value.trim();
      bank.color = colorInput.value;

      if (!bank.name) {
        alert('–ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!');
        return;
      }

      new appState().saveState();
      this.renderBanks();
      modal.classList.remove('show');
      modalContent.innerHTML = '';
    });

    // –£–¥–∞–ª–µ–Ω–∏–µ –±–∞–Ω–∫–∞
    document.getElementById('deleteBankBtn').addEventListener('click', () => {
      if (confirm(`–£–¥–∞–ª–∏—Ç—å –±–∞–Ω–∫ "${bank.name}"? –í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–∞–∫–∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã!`)) {
        this.deleteBank(id);
        modal.classList.remove('show');
        modalContent.innerHTML = '';
      }
    });

    // –û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    document.getElementById('cancelBankEdit').addEventListener('click', () => {
      modal.classList.remove('show');
      modalContent.innerHTML = '';
    });
  }

  getBankSelectOptions() {
    let options = "";
    for (const [name, icon] of Object.entries(this.availableBanks)) {
      const exists = state.banks.some((b) => b.name === name);
      if (!exists) {
        options += `<option value="${name}" data-icon="${icon}">${name}</option>`;
      }
    }
    return options;
  }

  addBank(bank) {
    const icon =
      this.availableBanks[bank.name] || bank.customIcon || "default-bank.svg";
    state.banks.push({
      ...bank,
      id: Date.now(),
      icon: icon,
    });
    new appState().saveState();
    this.renderBanks();
  }

  deleteBank(id) {
    state.banks = state.banks.filter((b) => b.id !== id);
    state.categories = state.categories.filter((cat) => cat.bankId !== id);
    new appState().saveState();
    this.renderBanks();
    new Categories().renderCategories();
  }
}

class Categories {
  constructor() {
    this.renderCategories();
  }

  addCategory(category) {
    state.categories.push({
      ...category,
      id: Date.now(),
      month: state.currentMonth,
    });
    new appState().saveState();
    this.renderCategories();
  }

  renderCategories() {
    const list = document.getElementById("categoriesList");
    const currentMonthCategories = state.categories.filter(
      (cat) => cat.month === state.currentMonth
    );

    list.innerHTML = currentMonthCategories
      .map((cat) => {
        const bank = state.banks.find((b) => b.id === cat.bankId);
        return `
      <div class="category-card" data-id="${cat.id}">
        <div class="category-content">
          <i class="fa-solid ${this.getCategoryIcon(cat.name)}"></i>
          <span style="color: ${cat.color}">${cat.name}</span>
          <span class="discount-badge">${cat.discount}</span>
          <span class="bank-badge" style="background: ${bank?.color || "#ccc"}">
            ${bank?.name || "–ù–µ—Ç –±–∞–Ω–∫–∞"}
          </span>
        </div>
        <div class="category-actions">
          <button class="edit-btn" data-id="${cat.id}">‚úèÔ∏è</button>
          <button class="delete-btn" data-id="${cat.id}">üóëÔ∏è</button>
        </div>
      </div>
    `;
      })
      .join("");

    // –í–µ—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    list.querySelectorAll(".delete-btn").forEach((btn) => {
      btn.addEventListener("click", (e) => {
        this.deleteCategory(parseInt(e.target.dataset.id));
      });
    });

    list.querySelectorAll(".edit-btn").forEach((btn) => {
      btn.addEventListener("click", (e) => {
        this.editCategory(parseInt(e.target.dataset.id));
      });
    });
  }

  deleteCategory(id) {
    state.categories = state.categories.filter((c) => c.id !== id);
    new appState().saveState();
    this.renderCategories();
  }

  editCategory(id) {
    const category = state.categories.find((c) => c.id === id);

    modalContent.innerHTML = `
      <h2 class="text-center">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é</h2>
      <div class="form">
        <input type="text" id="editCategoryName" value="${category.name}" />
        <input type="text" id="editCategoryDiscount" value="${category.discount
      }" />
        <input type="color" id="editCategoryColor" value="${category.color}" />
        <select id="editCategoryBank">
          ${state.banks
        .map(
          (b) => `
            <option value="${b.id}" ${b.id === category.bankId ? "selected" : ""
            }>
              ${b.name}
            </option>
          `
        )
        .join("")}
        </select>
        <div class="form-actions">
          <button id="saveEditBtn">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
          <button id="cancelEditBtn">–û—Ç–º–µ–Ω–∞</button>
        </div>
      </div>
    `;

    document.getElementById("saveEditBtn").addEventListener("click", () => {
      category.name = document.getElementById("editCategoryName").value;
      category.discount = document.getElementById("editCategoryDiscount").value;
      category.color = document.getElementById("editCategoryColor").value;
      category.bankId = parseInt(
        document.getElementById("editCategoryBank").value
      );
      new appState().saveState();
      this.renderCategories();
      modal.classList.remove("show");
    });

    document.getElementById("cancelEditBtn").addEventListener("click", () => {
      modal.classList.remove("show");
    });
  }
}

class monthSelector {
  constructor() {
    this.currentMonth = document.getElementById("currentMonth");
    this.prev = document.getElementById("prevMonth");
    this.next = document.getElementById("nextMonth");
    this.events();
  }

  events() {
    this.prev.addEventListener("click", () => {
      state.currentDate.setMonth(state.currentDate.getMonth() - 1);
      this.updateMonthDisplay();
    });

    this.next.addEventListener("click", () => {
      state.currentDate.setMonth(state.currentDate.getMonth() + 1);
      this.updateMonthDisplay();
    });
  }

  updateMonthDisplay() {
    state.currentMonth = state.currentDate.toLocaleString("ru-RU", {
      month: "long",
      year: "numeric",
    });
    this.currentMonth.textContent = state.currentMonth;
    new Categories().renderCategories();
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', () => {
  new appState();
  new monthSelector();
  const banks = new Banks();
  const categories = new Categories();
});

// events
addBankBtn?.addEventListener("click", () => {
  const banks = new Banks();
  modalContent.innerHTML = `
    <h2 class="text-center">–î–æ–±–∞–≤–∏—Ç—å –±–∞–Ω–∫</h2>
    <div class="form form-creating">
      <div class="form-creating--inputs">
        <div class="form-row">
          <select id="bankSelect" class="bank-select">
            <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫</option>
            ${banks.getBankSelectOptions()}
          </select>
          <span>–∏–ª–∏</span>
          <input type="text" id="customBankName" placeholder="–î—Ä—É–≥–æ–π –±–∞–Ω–∫" />
        </div>
        <div class="form-row">
          <label>–¶–≤–µ—Ç: <input type="color" id="bankColor" value="#6200ee" /></label>
        </div>
      </div>
      <div class="form-actions">
        <button id="saveBank">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
        <button id="cancelBtn">–û—Ç–º–µ–Ω–∞</button>
      </div>
    </div>
  `;

  modal.classList.add("show");

  document.getElementById("bankSelect").addEventListener("change", function () {
    document.getElementById("customBankName").value = this.value;
  });

  document.getElementById("saveBank").addEventListener("click", () => {
    const nameInput = document.getElementById("customBankName");
    const name = nameInput.value.trim();
    if (!name) return alert("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞");

    banks.addBank({
      name: name,
      color: document.getElementById("bankColor").value,
    });
    modal.classList.remove("show");
    modalContent.innerHTML = '';
  });

  document.getElementById("cancelBtn").addEventListener("click", () => {
    modal.classList.remove("show");
    modalContent.innerHTML = '';
  });
});

modal?.querySelector('.btn-close').addEventListener('click', () => {
  modal.classList.remove("show");
  setTimeout(() => {
    modalContent.innerHTML = '';
  }, 250);
});

addCategoryBtn?.addEventListener("click", () => {
  modalContent.innerHTML = `
    <h2 class="text-center">–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é</h2>
    <div class="form form-creating">
      <div class="form-creating--inputs">
        <div class="form-creating--inputs form-creating--row">
          <input type="text" id="categoryName" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ" />
          <input type="text" id="categoryDiscount" placeholder="–ö–µ—à–±–µ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5%)" />
        </div>
        <input type="color" id="categoryColor" value="#33FF57" />
        <select id="categoryBank">
          ${state.banks
      .map((bank) => `<option value="${bank.id}">${bank.name}</option>`)
      .join("")}
        </select>
      </div>
      <button id="saveCategory">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
    </div>
  `;
  modal.classList.add("show");
});

document.getElementById('saveCategory')?.addEventListener("click", () => {
  new Categories().addCategory({
    name: document.getElementById("categoryName").value,
    discount: document.getElementById("categoryDiscount").value,
    color: document.getElementById("categoryColor").value,
    bankId: parseInt(document.getElementById("categoryBank").value),
  });
  modal.classList.remove("show");
  modalContent.innerHTML = '';
});

document.getElementById('shareBtn').addEventListener('click', async () => {
  const list = document.getElementById('categoriesList');

  // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
  const tempContainer = document.createElement('div');
  tempContainer.style.background = 'white';
  tempContainer.style.padding = '20px';
  tempContainer.style.borderRadius = '10px';
  tempContainer.innerHTML = `
    <h2 style="text-align: center; margin-bottom: 15px;">
      –ú–æ–π –∫–µ—à–±–µ–∫ –Ω–∞ (${state.currentMonth})
    </h2>
    ${list.innerHTML}
  `;
  document.body.appendChild(tempContainer);

  try {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const dataUrl = await htmlToImage.toPng(tempContainer);

    // –í–∞—Ä–∏–∞–Ω—Ç 1: –ù–∞—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é —à–∞—Ä–∏–Ω–≥–∞ (—Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –º–æ–±–∏–ª–∞—Ö)
    if (navigator.share) {
      const response = await fetch(dataUrl);
      const blob = await response.blob();
      const file = new File([blob], 'cashback-list.png', { type: 'image/png' });

      await navigator.share({
        title: `–ú–æ–π –∫–µ—à–±–µ–∫-–ª–∏—Å—Ç (${state.currentMonth})`,
        text: '–°–º–æ—Ç—Ä–∏ –∫–∞–∫–∏–µ –∫–µ—à–±–µ–∫-–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —è –∏—Å–ø–æ–ª—å–∑—É—é!',
        files: [file]
      });
    }
    // –í–∞—Ä–∏–∞–Ω—Ç 2: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ (–¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞)
    else {
      saveAs(dataUrl, `cashback-list-${new Date().toISOString()}.png`);
      alert('–°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –≤—Ä—É—á–Ω—É—é.');
    }
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ —à–∞—Ä–∏–Ω–≥–∞:', e);
  } finally {
    tempContainer.remove();
  }
});